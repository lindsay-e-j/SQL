# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

/*Create table for spotify data.*/
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL);

/*Who are the ten most popular artists on Spotify in 2021?*/
SELECT artist_name, AVG(popularity) AS average_popularity
    FROM BIT_DB.Spotifydata
    GROUP BY artist_name
    ORDER BY popularity DESC
    LIMIT 10;

/*Which artists had more than 1 song in the top 100?*/
SELECT artist_name, COUNT(track_name) AS number_of_songs
    FROM BIT_DB.Spotifydata
    GROUP BY artist_name
    HAVING number_of_songs > 1
    ORDER BY number_of_songs DESC;

/*What are the 10 fastest songs, and how does their danceability compare to average danceability?*/
SELECT track_name, artist_name, tempo, (danceability - (SELECT AVG(danceability) FROM BIT_DB.Spotifydata)) AS difference_from_average_danceability
    FROM BIT_DB.Spotifydata
    GROUP  BY track_name
    ORDER BY tempo DESC    
    LIMIT 10;
    
/*What is the average popularity of the top artists on spotify, after averaging all songs' popularity?*/
WITH tempTable AS (
    SELECT artist_name, AVG(popularity) AS average_popularity
    FROM Spotifydata s
    GROUP BY artist_name
)
SELECT artist_name, 'Top Star' AS tag, average_popularity
    FROM tempTable
    WHERE average_popularity >= 90
    ORDER BY average_popularity DESC;
